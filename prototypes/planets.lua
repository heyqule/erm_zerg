---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by heyqule.
--- DateTime: 10/26/2024 7:20 PM
---

if not mods["space-age"] then
    return
end

local effects = require("__core__.lualib.surface-render-parameter-effects")
local planet_catalogue_vulcanus = require("__space-age__.prototypes.planet.procession-catalogue-vulcanus")
local asteroid_triggers = require("__erm_libs__.prototypes.asteroid_triggers")
local Minerals = require('__erm_shared_economy__/prototypes/mineral')
local Geyser = require('__erm_shared_economy__/prototypes/geyser')
local Refinery = require('__erm_shared_economy__/prototypes/refinery')
local SoundUtil = require('__erm_libs__/prototypes/sound_util')
local PsiRadar = require('__erm_libs__/prototypes/psi_scanner')
--- Char mineral uses vulcanus_calcite_probability for placement
local mineral_name = 'char_mineral'
Minerals.add_resource({
    name = mineral_name,
    icon_color = "yellow",
    order = 'b', -- same order as iron
    mining_time = 2,
    import_location = 'char',
    ---autoplace
    has_starting_area_placement = true,
    base_density = 8,
    regular_rq_factor_multiplier = 1.2,
    starting_rq_factor_multiplier = 1.5,
})
Minerals.add_recycle_recipe({
    name = mineral_name,
    icon_color = "yellow",
    enabled = false,
    energy_required = 0.2,
    ingredients = {
        {type = "item", name = mineral_name, amount = 1}
    },
    results = {
        {type = "item", name = "calcite",  amount = 1, probability = 0.66, show_details_in_recipe_tooltip = false},
        {type = "item", name = "coal",  amount = 1, probability = 0.2, show_details_in_recipe_tooltip = false},
        {type = "item", name = "tungsten-ore",  amount = 1, probability = 0.02, show_details_in_recipe_tooltip = false},
        {type = "item", name = "holmium-ore", amount = 1, probability = 0.01, show_details_in_recipe_tooltip = false},
        {type = "item", name = MOD_NAME..'--larva_egg',  amount = 1, probability = 0.005, show_details_in_recipe_tooltip = false},
    }
})

local mineral_name2 = 'char_mineral_2'
Minerals.add_resource({
    name = mineral_name2,
    icon_color = "purple",
    order = 'b', -- same order as iron
    mining_time = 2,
    import_location = 'char',
    ---autoplace
    has_starting_area_placement = true,
    base_density = 4,
    regular_rq_factor_multiplier = 1.2,
    starting_rq_factor_multiplier = 1.5,
})
Minerals.add_recycle_recipe({
    name = mineral_name2,
    icon_color = "purple",
    enabled = false,
    energy_required = 0.2,
    ingredients = {
        {type = "item", name = mineral_name2, amount = 1}
    },
    results = {
        {type = "item", name = "tungsten-ore", amount = 1, probability = 0.5, show_details_in_recipe_tooltip = false},
        {type = "item", name = "calcite",  amount = 1, probability = 0.1, show_details_in_recipe_tooltip = false},
        {type = "item", name = "coal",  amount = 1, probability = 0.25, show_details_in_recipe_tooltip = false},
        {type = "item", name = "uranium-ore",  amount = 1, probability = 0.01, show_details_in_recipe_tooltip = false},
        {type = "item", name = MOD_NAME..'--larva_egg',  amount = 1, probability = 0.005, show_details_in_recipe_tooltip = false},
    }
})

local geyser_name = 'char_geyser'
Geyser.add_resource({
    name = geyser_name,
    type = 'zerg',
    order = 'c', -- same order as iron
    mining_time = 2,
    import_location = 'char',
    ---autoplace
    has_starting_area_placement = false,
    base_density = 4,
    regular_rq_factor_multiplier = 1,
    starting_rq_factor_multiplier = 1,
    random_probability = 1/128,
    random_spot_size_minimum = 1,
    random_spot_size_maximum = 1,

    
    smoke_color_1_outer = {r=0.72, g=0.79, b=0.43},
    smoke_color_1_outer_strength = 0.2,
    smoke_color_1_inner = {r=0.72, g=0.79, b=0.43},
    smoke_color_1_inner_strength = 0.5,
    smoke_color_2_outer = {r=0.72, g=0.79, b=0.43},
    smoke_color_2_outer_strength = 0.3,
    smoke_color_2_inner = {r=0.72, g=0.79, b=0.43},
    smoke_color_2_inner_strength = 0.7,
    map_color = {r=0.72, g=0.79, b=0.43},
})
Geyser.add_refinery_recipe({
    name = geyser_name,
    type = 'zerg',
    enabled = false,
    energy_required = 5,
    ingredients = {
        {type = "item", name = geyser_name, amount = 12}
    },
    results = {
        {type = "fluid", name = "steam", amount = 240, temperature = 500},
        {type = "fluid", name = "sulfuric-acid", amount = 600},
        {type = "fluid", name = "heavy-oil", amount = 6},
    }
})

Refinery.add_zerg_machine()

data.extend({
    {
        type = "surface-property",
        name = "zerg_influence",
        default_value = 0
    }
})

local icons = {
    {
        icon = "__base__/graphics/icons/radar.png",
        icon_size = 64,
        scale = 0.5,
        shift = {-9,-9}
    },
    {
        icon = "__erm_zerg_hd_assets__/graphics/entity/icons/items/larva_egg.png",
        icon_size = 64,
        scale = 0.5,
        shift = {9, 9},
    },
}
local surface_conditions = {
    { property = 'zerg_influence', min=90, max=100 }
} 
local ingredients = {
    {type= "item", name= "steel-plate", amount= 100},
    {type= "item", name= "refined-concrete", amount= 100},
    {type = "item", name = "quantum-processor", amount = 1},
    {type = "item", name = "superconductor", amount = 1},
    {type = "item", name = "supercapacitor", amount = 1},
    {type= "item", name= MOD_NAME..'--larva_egg', amount= 1000}
}
PsiRadar.make_entity(MOD_NAME, icons, surface_conditions)
PsiRadar.make_item(MOD_NAME, icons)
PsiRadar.make_recipe(MOD_NAME, ingredients)

data.extend({
    --- Changed from 80000 to 50000
    {
        type = "noise-expression",
        name = "char_vespene_geyser_richness",
        expression = "(vulcanus_sulfuric_acid_region > 0) * random_penalty_between(0.5, 1, 1)\z
                  * 50000 * 40 * vulcanus_richness_multiplier * vulcanus_starting_area_multiplier\z
                  * control:char_geyser:richness / char_vespene_geyser_size"
    },
    --- Changed from 2 to 0.75
    {
        type = "noise-expression",
        name = "char_vespene_geyser_size",
        expression = "slider_rescale(control:char_geyser:size, 0.66)"
    },
    --- Density 4 -> 3
    {
        type = "noise-function",
        name = "char_vespene_geyser_spots",
        parameters = {"seed", "count", "offset", "size", "freq", "favor_biome"},
        expression = "min(2 * favor_biome - 1, vulcanus_spot_noise{seed = seed,\z
                                                               count = count,\z
                                                               spacing = vulcanus_ore_spacing,\z
                                                               span = 3,\z
                                                               offset = offset,\z
                                                               region_size = 450 + 450 / freq,\z
                                                               density = favor_biome * 3,\z
                                                               quantity = size,\z
                                                               radius = size,\z
                                                               favorability = favor_biome > 0.9})"
    },
    --- -1 to 1: needs a positive region for resources & decoratives plus a subzero baseline and skirt for surrounding decoratives.
    {
        type = "noise-expression",
        name = "char_vespene_geyser_region",
        expression = "max(vulcanus_starting_sulfur,\z
                      min(1 - vulcanus_starting_circle,\z
                          char_vespene_geyser_spots(759, 9, 0,\z
                                                      char_vespene_geyser_size * min(1.2, vulcanus_ore_dist) * 25,\z
                                                      control:char_geyser:frequency,\z
                                                      vulcanus_mountains_sulfur_favorability)))"
    },
    {
        type = "noise-expression",
        name = "char_vespene_geyser_patches",
        expression = "0.8 * abs(multioctave_noise{x = x, y = y, persistence = 0.7, seed0 = map_seed, seed1 = 21000, octaves = 2, input_scale = 1/3})"
    },
    {
        type = "noise-expression",
        name = "char_vespene_geyser_region_patchy",
        expression = "(1 + vulcanus_sulfuric_acid_region) * (0.4 + 0.4 * char_vespene_geyser_patches) - 1"
    },
    {
        type = "noise-expression",
        name = "char_vespene_geyser_probability",
        expression = "(control:char_geyser:size > 0) * (0.025 * ((char_vespene_geyser_region_patchy > 0) + 2 * char_vespene_geyser_region_patchy))"
    },
    
})

local char_mapgen = {
    starting_area = 2,
    property_expression_names = {
        elevation = "vulcanus_elevation",
        temperature = "vulcanus_temperature",
        moisture = "vulcanus_moisture",
        aux = "vulcanus_aux",
        cliffiness = "cliffiness_basic",
        cliff_elevation = "cliff_elevation_from_elevation",
        ["entity:coal:probability"] = "vulcanus_coal_probability",
        ["entity:coal:richness"] = "vulcanus_coal_richness",
        ["entity:"..mineral_name..":probability"] = "vulcanus_calcite_probability",
        ["entity:"..mineral_name..":richness"] = "vulcanus_calcite_richness",
        ["entity:"..mineral_name2..":probability"] = "vulcanus_tungsten_ore_probability",
        ["entity:"..mineral_name2..":richness"] = "vulcanus_tungsten_ore_richness",
        ["entity:"..geyser_name..":probability"] = "char_vespene_geyser_probability",
        ["entity:"..geyser_name..":richness"] = "char_vespene_geyser_richness",
    },
    cliff_settings = {
        name = "cliff-vulcanus",
        cliff_elevation_interval = 120,
        cliff_elevation_0 = 70
    },
    territory_settings = {
        units = {
            MOD_NAME .. "--medium-nydusworm",
            MOD_NAME .. "--big-nydusworm",
        },
        territory_index_expression = "demolisher_territory_expression",
        territory_variation_expression = "demolisher_variation_expression",
        minimum_territory_size = 7
    },
    autoplace_controls = {
        [mineral_name] = {},
        [mineral_name2] = {},
        [geyser_name] = {},
        [AUTOCONTROL_NAME] = {},
        --["rocks"] = {}, -- can"t add the rocks control otherwise nauvis rocks spawn
    },
    autoplace_settings = {
        ["tile"] = {
            settings = {
                --nauvis tiles
                ["volcanic-soil-dark"] = {},
                ["volcanic-soil-light"] = {},
                ["volcanic-ash-soil"] = {},
                --end of nauvis tiles
                ["volcanic-ash-flats"] = {},
                ["volcanic-ash-light"] = {},
                ["volcanic-ash-dark"] = {},
                ["volcanic-cracks"] = {},
                ["volcanic-cracks-warm"] = {},
                ["volcanic-folds"] = {},
                ["volcanic-folds-flat"] = {},
                ["lava"] = {},
                ["lava-hot"] = {},
                ["volcanic-folds-warm"] = {},
                ["volcanic-pumice-stones"] = {},
                ["volcanic-cracks-hot"] = {},
                ["volcanic-jagged-ground"] = {},
                ["volcanic-smooth-stone"] = {},
                ["volcanic-smooth-stone-warm"] = {},
                ["volcanic-ash-cracks"] = {},
            }
        },
        ["decorative"] = {
            settings = {
                -- nauvis decoratives
                ["v-brown-carpet-grass"] = {},
                ["v-green-hairy-grass"] = {},
                ["v-brown-hairy-grass"] = {},
                ["v-red-pita"] = {},
                -- end of nauvis
                ["vulcanus-rock-decal-large"] = {},
                ["vulcanus-crack-decal-large"] = {},
                ["vulcanus-crack-decal-huge-warm"] = {},
                ["vulcanus-dune-decal"] = {},
                ["vulcanus-sand-decal"] = {},
                ["vulcanus-lava-fire"] = {},
                ["calcite-stain"] = {},
                ["calcite-stain-small"] = {},
                ["sulfur-stain"] = {},
                ["sulfur-stain-small"] = {},
                ["sulfuric-acid-puddle"] = {},
                ["sulfuric-acid-puddle-small"] = {},
                ["crater-small"] = {},
                ["crater-large"] = {},
                ["pumice-relief-decal"] = {},
                ["small-volcanic-rock"] = {},
                ["medium-volcanic-rock"] = {},
                ["tiny-volcanic-rock"] = {},
                ["tiny-rock-cluster"] = {},
                ["small-sulfur-rock"] = {},
                ["tiny-sulfur-rock"] = {},
                ["sulfur-rock-cluster"] = {},
                ["waves-decal"] = {},
            }
        },
        ["entity"] = {
            settings = {
                [mineral_name] = {},
                [mineral_name2] = {},
                [geyser_name] = {},
                ["huge-volcanic-rock"] = {},
                ["big-volcanic-rock"] = {},
                ["crater-cliff"] = {},
                ["vulcanus-chimney"] = {},
                ["vulcanus-chimney-faded"] = {},
                ["vulcanus-chimney-cold"] = {},
                ["vulcanus-chimney-short"] = {},
                ["vulcanus-chimney-truncated"] = {},
                ["ashland-lichen-tree"] = {},
                ["ashland-lichen-tree-flaming"] = {},
            }
        }
    }
}

----- Add Large asteroid that spawn units
local oxide_name = MOD_NAME.."--medium-infested-oxide-asteroid"
local zerg_spawning_oxide_asteroid = util.table.deepcopy(data.raw['asteroid']['medium-oxide-asteroid'])
zerg_spawning_oxide_asteroid["name"] = oxide_name

local carbonic_name = MOD_NAME.."--medium-infested-carbonic-asteroid"
local zerg_spawning_carbonic_asteroid = util.table.deepcopy(data.raw['asteroid']['medium-carbonic-asteroid'])
zerg_spawning_carbonic_asteroid["name"]  = carbonic_name

local metallic_name = MOD_NAME.."--medium-infested-metallic-asteroid"
local zerg_spawning_metallic_asteroid = util.table.deepcopy(data.raw['asteroid']['medium-metallic-asteroid'])
zerg_spawning_metallic_asteroid["name"]  = metallic_name

local new_asteroids = {
    [oxide_name] = zerg_spawning_metallic_asteroid,
    [carbonic_name] = zerg_spawning_carbonic_asteroid,
    [metallic_name] = zerg_spawning_oxide_asteroid,
}

local astreroid_data = {
    [metallic_name] = {
        scourge = { [4] = 0.35},
        mutalisk = { [4] = 0.25, [5] = 0.1},
        devourer = { [4] = 0.15, [5] = 0.05},
    },
    [carbonic_name] = {
        scourge = { [4] = 0.35},
        mutalisk = { [4] = 0.25, [5] = 0.1},
        overlord = { [4] = 0.1},
    },
    [oxide_name] = {
        scourge = { [4] = 0.35},
        guardian = { [4] = 0.1, [5] = 0.02},
        devourer = { [4] = 0.15, [5] = 0.05},
    }
}
for key, a_data in pairs(astreroid_data) do
    for unit_name, spawn_data in pairs(a_data) do
        for tier, chance in pairs(spawn_data) do
            asteroid_triggers.add_unit_to_asteroid(new_asteroids[key], MOD_NAME, unit_name, tier, chance)
        end
    end
end

data:extend({
    --- Asteroid that spawn units
    zerg_spawning_oxide_asteroid,
    zerg_spawning_carbonic_asteroid,
    zerg_spawning_metallic_asteroid,
})

local char_space_connection_asteroid_spawn_definition = {
    {
        asteroid = "metallic-asteroid-chunk",
        spawn_points = {
            {
                angle_when_stopped = 1,
                distance = 0.1,
                probability = 0.0125,
                speed = 0.016666666666666665
            },
            {
                angle_when_stopped = 1,
                distance = 0.9,
                probability = 0.0025,
                speed = 0.016666666666666665
            }
        },
        type = "asteroid-chunk"
    },
    {
        asteroid = "carbonic-asteroid-chunk",
        spawn_points = {
            {
                angle_when_stopped = 1,
                distance = 0.1,
                probability = 0.0083333333333333321,
                speed = 0.016666666666666665
            },
            {
                angle_when_stopped = 1,
                distance = 0.9,
                probability = 0.001875,
                speed = 0.016666666666666665
            }
        },
        type = "asteroid-chunk"
    },
    {
        asteroid = "oxide-asteroid-chunk",
        spawn_points = {
            {
                angle_when_stopped = 1,
                distance = 0.1,
                probability = 0.0041666666666666661,
                speed = 0.016666666666666665
            },
            {
                angle_when_stopped = 1,
                distance = 0.9,
                probability = 0.000625,
                speed = 0.016666666666666665
            }
        },
        type = "asteroid-chunk"
    },
    {
        asteroid = metallic_name,
        spawn_points = {
            {
                angle_when_stopped = 0.6,
                distance = 0.1,
                probability = 0,
                speed = 0.016666666666666665
            },
            {
                angle_when_stopped = 0.6,
                distance = 0.5,
                probability = 0.0075,
                speed = 0.016666666666666665
            },
            {
                angle_when_stopped = 0.6,
                distance = 0.9,
                probability = 0.0025,
                speed = 0.016666666666666665
            }
        }
    },
    {
        asteroid = carbonic_name,
        spawn_points = {
            {
                angle_when_stopped = 0.6,
                distance = 0.1,
                probability = 0,
                speed = 0.016666666666666665
            },
            {
                angle_when_stopped = 0.6,
                distance = 0.5,
                probability = 0.0053124999999999991,
                speed = 0.016666666666666665
            },
            {
                angle_when_stopped = 0.6,
                distance = 0.9,
                probability = 0.001875,
                speed = 0.016666666666666665
            }
        }
    },
    {
        asteroid = oxide_name,
        spawn_points = {
            {
                angle_when_stopped = 0.6,
                distance = 0.1,
                probability = 0,
                speed = 0.016666666666666665
            },
            {
                angle_when_stopped = 0.6,
                distance = 0.5,
                probability = 0.0021875,
                speed = 0.016666666666666665
            },
            {
                angle_when_stopped = 0.6,
                distance = 0.9,
                probability = 0.000625,
                speed = 0.016666666666666665
            }
        }
    }
}

local char_space_asteroid_spawn_definition = {
    {
        asteroid = "metallic-asteroid-chunk",
        angle_when_stopped = 1,
        probability = 0.0025,
        speed = 0.016666666666666665,
        type = "asteroid-chunk"
    },
    {
        asteroid = "carbonic-asteroid-chunk",
        angle_when_stopped = 1,
        probability = 0.001875,
        speed = 0.016666666666666665,
        type = "asteroid-chunk"
    },
    {
        asteroid = "oxide-asteroid-chunk",
        angle_when_stopped = 1,
        probability = 0.000625,
        speed = 0.016666666666666665,
        type = "asteroid-chunk"
    },
    {
        asteroid = metallic_name,
        angle_when_stopped = 0.6,
        probability = 0.0025,
        speed = 0.016666666666666665,
    },
    {
        asteroid = carbonic_name,
        angle_when_stopped = 0.6,
        probability = 0.001875,
        speed = 0.016666666666666665
    },
    {
        asteroid = oxide_name,
        angle_when_stopped = 0.6,
        probability = 0.000625,
        speed = 0.016666666666666665
    }
}

data:extend({
    --- Planet
    {
        type = "planet",
        name = "char",
        icon = "__space-age__/graphics/icons/vulcanus.png",
        starmap_icon = "__space-age__/graphics/icons/starmap-planet-vulcanus.png",
        starmap_icon_size = 512,
        gravity_pull = 10,
        distance = 12.5,
        orientation = 0.9,
        magnitude = 1,
        order = "b[char]",
        subgroup = "planets",
        map_seed_offset = 100010,
        map_gen_settings = char_mapgen,
        pollutant_type = "pollution",
        solar_power_in_space = 500,
        platform_procession_set = {
            arrival = { "planet-to-platform-b" },
            departure = { "platform-to-planet-a" }
        },
        planet_procession_set = {
            arrival = { "platform-to-planet-b" },
            departure = { "planet-to-platform-a" }
        },
        procession_graphic_catalogue = planet_catalogue_vulcanus,
        surface_properties = {
            ["day-night-cycle"] = 5 * minute,
            ["magnetic-field"] = 25,
            ["solar-power"] = 400,
            pressure = 4250,
            gravity = 40,
            zerg_influence = 100,
        },
        asteroid_spawn_influence = 1,
        asteroid_spawn_definitions = char_space_asteroid_spawn_definition,
        persistent_ambient_sounds = {
            base_ambience = { filename = "__space-age__/sound/wind/base-wind-vulcanus.ogg", volume = 0.8 },
            wind = { filename = "__space-age__/sound/wind/wind-vulcanus.ogg", volume = 0.8 },
            crossfade = {
                order = { "wind", "base_ambience" },
                curve_type = "cosine",
                from = { control = 0.35, volume_percentage = 0.0 },
                to = { control = 2, volume_percentage = 100.0 }
            },
            semi_persistent = {
                {
                    sound = { variations = sound_variations("__space-age__/sound/world/semi-persistent/distant-rumble", 3, 0.5) },
                    delay_mean_seconds = 10,
                    delay_variance_seconds = 5
                },
                {
                    sound = { variations = sound_variations("__space-age__/sound/world/semi-persistent/distant-flames", 5, 0.6) },
                    delay_mean_seconds = 15,
                    delay_variance_seconds = 7.0
                }
            }
        },
        surface_render_parameters = {
            fog = effects.default_fog_effect_properties(),
            -- clouds = effects.default_clouds_effect_properties(),

            -- Should be based on the default day/night times, ie
            -- sun starts to set at 0.25
            -- sun fully set at 0.45
            -- sun starts to rise at 0.55
            -- sun fully risen at 0.75
            day_night_cycle_color_lookup = {
                { 0.0, "__space-age__/graphics/lut/vulcanus-1-day.png" },
                { 0.20, "__space-age__/graphics/lut/vulcanus-1-day.png" },
                { 0.45, "__space-age__/graphics/lut/vulcanus-2-night.png" },
                { 0.55, "__space-age__/graphics/lut/vulcanus-2-night.png" },
                { 0.80, "__space-age__/graphics/lut/vulcanus-1-day.png" },
            },

            terrain_tint_effect = {
                noise_texture = {
                    filename = "__space-age__/graphics/terrain/vulcanus/tint-noise.png",
                    size = 4096
                },

                offset = { 0.2, 0, 0.4, 0.8 },
                intensity = { 0.5, 0.2, 0.3, 1.0 },
                scale_u = { 3, 1, 1, 1 },
                scale_v = { 1, 1, 1, 1 },

                global_intensity = 0.3,
                global_scale = 0.1,
                zoom_factor = 3,
                zoom_intensity = 0.6
            }
        }
    },
    --- space connection
    {
        type = "space-connection",
        name = "nauvis-char",
        subgroup = "planet-connections",
        from = "nauvis",
        to = "char",
        order = "nauvis-char",
        length = 22500,
        asteroid_spawn_definitions = char_space_connection_asteroid_spawn_definition
    },
    {
        type = "space-connection",
        name = "vulcanus-char",
        subgroup = "planet-connections",
        from = "vulcanus",
        to = "char",
        order = "vulcanus-char",
        length = 15000,
        asteroid_spawn_definitions = char_space_connection_asteroid_spawn_definition
    },
    --- unlock tech
    {
        type = "technology",
        name = "planet-discovery-char",
        icons = util.technology_icon_constant_planet("__space-age__/graphics/technology/vulcanus.png"),
        icon_size = 256,
        essential = false,
        effects = {
            {
                type = "unlock-space-location",
                space_location = "char",
                use_icon_overlay_constant = true
            },
            --- Unlock protoss refinery, it's global
            {
                type = "unlock-recipe",
                recipe = "zerg_refinery"
            },
            --- Unlock planet specific refinery and recipes
            {
                type = "unlock-recipe",
                recipe = geyser_name.."-refinery"
            },
            {
                type = "unlock-recipe",
                recipe = mineral_name.."-recycling"
            },
            {
                type = "unlock-recipe",
                recipe = mineral_name2.."-recycling"
            },
            {
                type = "unlock-recipe",
                recipe = MOD_NAME.."--psi-radar"
            }
        },
        prerequisites = { "space-platform-thruster", "landfill" },
        unit = {
            count = 1000,
            ingredients = {
                { "automation-science-pack", 1 },
                { "logistic-science-pack", 1 },
                { "chemical-science-pack", 1 },
                { "space-science-pack", 1 }
            },
            time = 60
        }
    },
})

data.rso_ignore_resource_entities = data.rso_ignore_resource_entities or {}
data.rso_ignore_resource_entities[geyser_name] = true
data.rso_ignore_resource_entities[mineral_name] = true
data.rso_ignore_resource_entities[mineral_name2] = true


data.rso_ignore_planets = data.rso_ignore_planets or {}
data.rso_ignore_planets['char'] = true

if mods['starcraft-music'] then
    local source_path = "__starcraft-music__/sounds/"
    data:extend({
        {
            type = "ambient-sound",
            planet = "char",
            track_type = "main-track",
            name = "char-zerg-1",
            sound = { filename = source_path .. "Zerg One.ogg" }
        },
        {
            type = "ambient-sound",
            planet = "char",
            track_type = "main-track",
            name = "char-zerg-2",
            sound = { filename = source_path .. "Zerg Two.ogg" }
        },
        {
            type = "ambient-sound",
            planet = "char",
            track_type = "main-track",
            name = "char-zerg-3",
            sound = { filename = source_path .. "Zerg Three.ogg" }
        },
    })
else
    local sound_data = SoundUtil.dupe_planet_music('vulcanus','char')
    if table_size(sound_data) > 0 then
        data:extend(sound_data)
    end
end 
